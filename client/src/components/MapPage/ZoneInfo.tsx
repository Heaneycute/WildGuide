import React, { useState } from 'react';
import { Box, Typography, Divider, Accordion, AccordionSummary, AccordionDetails, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { useSelector } from 'react-redux';
import { selectSelectedArea } from '../../Redux/Slices/MapPage/huntingAreasSlice';
import { commonBoxStyles } from '../../Styles/MapPageComponents.styles';

export default function ZoneInfo() {
  const [selectedCabin, setSelectedCabin] = useState(null);
  const selectedArea = useSelector(selectSelectedArea);

  if (!selectedArea) {
    return (
      <Box sx={commonBoxStyles}>
        <Typography variant="h6" color="#ffffff">
          –í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        </Typography>
      </Box>
    );
  }

  const mockData = {
    terrainInfo: "–°–º–µ—à–∞–Ω–Ω—ã–π –ª–µ—Å ‚Ä¢ 1250.75 –≥–∞ ‚Ä¢ 156 –º",
    cabins: {
      total: 3,
      permanent: 2,
      temporary: 1,
      capacity: 12,
      list: [
        {
          id: 1,
          name: "–î–æ–º–∏–∫ —É –æ–∑–µ—Ä–∞",
          type: "permanent",
          capacity: 4,
          hasElectricity: true,
          heatingType: "–ü–µ—á–Ω–æ–µ",
          kitchenFacilities: true,
          bathroomType: "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π",
          price: 2500,
          transportAccess: "–ü–æ–¥—ä–µ–∑–¥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
          description: "–£—é—Ç–Ω—ã–π –¥–æ–º–∏–∫ —Å –≤–∏–¥–æ–º –Ω–∞ –æ–∑–µ—Ä–æ, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω—ã–π –≤—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è."
        },
        {
          id: 2,
          name: "–õ–µ—Å–Ω–æ–π –ø—Ä–∏—é—Ç",
          type: "permanent",
          capacity: 6,
          hasElectricity: true,
          heatingType: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ",
          kitchenFacilities: true,
          bathroomType: "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π",
          price: 3000,
          transportAccess: "–ì—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞",
          description: "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –¥–æ–º–∏–∫ –≤ –≥–ª—É–±–∏–Ω–µ –ª–µ—Å–∞, –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π."
        },
        {
          id: 3,
          name: "–í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∞–≥–µ—Ä—å",
          type: "temporary",
          capacity: 2,
          hasElectricity: false,
          heatingType: "–ù–µ—Ç",
          kitchenFacilities: false,
          bathroomType: "–í–Ω–µ—à–Ω–∏–π",
          price: 1000,
          transportAccess: "–ü–µ—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
          description: "–ë–∞–∑–æ–≤–æ–µ —É–∫—Ä—ã—Ç–∏–µ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–∏—Ä–æ–¥—ã."
        }
      ]
    },
    hunting: ["–ö–æ–ø—ã—Ç–Ω—ã–µ (–∫–∞–±–∞–Ω, –ª–æ—Å—å)", "–ü—É—à–Ω—ã–µ –∑–≤–µ—Ä–∏", "–í–æ–¥–æ–ø–ª–∞–≤–∞—é—â–∞—è –¥–∏—á—å"],
    seasons: ["–í–µ—Å–Ω–∞: 15.03 - 30.04", "–û—Å–µ–Ω—å: 15.09 - 15.12", "–ó–∏–º–∞: 01.01 - 28.02"],
    restrictions: [
      "–ó–∞–ø—Ä–µ—Ç –Ω–æ—á–Ω–æ–π –æ—Ö–æ—Ç—ã",
      "–ó–∞–ø—Ä–µ—Ç –º–æ—Ç–æ—Ä–Ω—ã—Ö –ª–æ–¥–æ–∫",
      "–õ–∏–º–∏—Ç –¥–æ–±—ã—á–∏",
      "–ó–∞–ø—Ä–µ—Ç –≤ –ø–µ—Ä–∏–æ–¥ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è"
    ],
    infrastructure: [
      "–í—ã—à–∫–∏: 3",
      "–î–æ—Ä–æ–≥–∏: 2",
      "–ü–∞—Ä–∫–æ–≤–∫–∞: 10 –º–µ—Å—Ç",
      "–ü–ª–æ—â–∞–¥–∫–∞ —Ä–∞–∑–¥–µ–ª–∫–∏"
    ],
    waterSources: [
      "–û–∑–µ—Ä–æ \"–ö—Ä—É–≥–ª–æ–µ\"",
      "–†—É—á–µ–π \"–°–≤–µ—Ç–ª—ã–π\"",
      "–†–æ–¥–Ω–∏–∫–∏: 2"
    ],
    documents: [
      "–û—Ö–æ—Ç–Ω–∏—á–∏–π –±–∏–ª–µ—Ç",
      "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ä—É–∂–∏–µ",
      "–ü—É—Ç–µ–≤–∫–∞ –Ω–∞ –æ—Ö–æ—Ç—É",
      "–õ–∏—Ü–µ–Ω–∑–∏—è"
    ],
    contacts: [
      "–ï–≥–µ—Ä—å: +7 XXX XXX XX XX",
      "–û—Ñ–∏—Å: +7 XXX XXX XX XX",
      "Email: hunt@example.com",
      "–í—Ä–µ–º—è: 9:00-18:00"
    ],
    rules: [
      "–¢–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
      "–ö–æ—Å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü. –º–µ—Å—Ç–∞—Ö",
      "–£–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞",
      "–ü–∞—Ä–∫–æ–≤–∫–∞ –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"
    ]
  };

  const handleCabinClick = (cabin) => {
    setSelectedCabin(cabin);
  };

  const handleCloseDialog = () => {
    setSelectedCabin(null);
  };

  return (
    <Box sx={{
      ...commonBoxStyles,
      display: 'flex',
      flexDirection: 'column',
      height: '500px',
      width: '100%'
    }}>
      <Box sx={{ 
        flex: '0 0 auto', 
        width: '100%',
        marginBottom: 2
      }}>
        <Typography variant="h5" color="#ffffff" gutterBottom>
          {selectedArea.name}
        </Typography>
        <Typography variant="subtitle1" color="#ffffff" gutterBottom>
          {mockData.terrainInfo}
        </Typography>
        <Typography variant="body1" color="#ffffff" gutterBottom>
          {selectedArea.description}
        </Typography>
        <Divider sx={{ bgcolor: 'rgba(255, 255, 255, 0.1)', my: 2 }} />
      </Box>
      
      <Box sx={{ 
        flex: '1 1 auto',
        overflowY: 'auto',
        width: '100%',
        '&::-webkit-scrollbar': {
          width: '8px'
        },
        '&::-webkit-scrollbar-track': {
          background: 'rgba(255, 255, 255, 0.1)'
        },
        '&::-webkit-scrollbar-thumb': {
          background: 'rgba(255, 255, 255, 0.2)',
          borderRadius: '4px'
        }
      }}>
        {/* –î–æ–º–∏–∫–∏ */}
        <Accordion sx={{ 
          bgcolor: 'rgba(0, 0, 0, 0.3)', 
          color: '#ffffff', 
          mb: 1,
          minWidth: 0
        }}>
          <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: '#ffffff' }} />}>
            <Typography noWrap>üè† –î–æ–º–∏–∫–∏ ({mockData.cabins.total})</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Typography>‚Ä¢ {mockData.cabins.permanent} –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö</Typography>
            <Typography>‚Ä¢ {mockData.cabins.temporary} –≤—Ä–µ–º–µ–Ω–Ω—ã–π</Typography>
            <Typography>‚Ä¢ –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {mockData.cabins.capacity} —á–µ–ª–æ–≤–µ–∫</Typography>
            <Divider sx={{ bgcolor: 'rgba(255, 255, 255, 0.1)', my: 1 }} />
            {mockData.cabins.list.map((cabin) => (
              <Box 
                key={cabin.id} 
                sx={{ 
                  cursor: 'pointer', 
                  '&:hover': { 
                    bgcolor: 'rgba(255, 255, 255, 0.1)'
                  },
                  p: 1,
                  borderRadius: 1,
                  mt: 1
                }}
                onClick={() => handleCabinClick(cabin)}
              >
                <Typography>
                  ‚Ä¢ {cabin.name} ({cabin.type === 'permanent' ? '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' : '–í—Ä–µ–º–µ–Ω–Ω—ã–π'})
                </Typography>
              </Box>
            ))}
          </AccordionDetails>
        </Accordion>

        {/* –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–º–∏–∫–µ */}
        <Dialog 
          open={Boolean(selectedCabin)} 
          onClose={handleCloseDialog}
          maxWidth="sm"
          fullWidth
          PaperProps={{
            sx: {
              bgcolor: 'rgba(0, 0, 0, 0.8)',
              backdropFilter: 'blur(10px)',
              borderRadius: '16px',
              color: '#ffffff'
            }
          }}
        >
          {selectedCabin && (
            <>
              <DialogTitle sx={{ borderBottom: '1px solid rgba(255, 255, 255, 0.1)' }}>
                {selectedCabin.name}
              </DialogTitle>
              <DialogContent>
                <Typography paragraph><b>–¢–∏–ø:</b> {selectedCabin.type === 'permanent' ? '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' : '–í—Ä–µ–º–µ–Ω–Ω—ã–π'}</Typography>
                <Typography paragraph><b>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {selectedCabin.capacity} —á–µ–ª–æ–≤–µ–∫</Typography>
                <Typography paragraph><b>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ:</b> {selectedCabin.hasElectricity ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</Typography>
                <Typography paragraph><b>–û—Ç–æ–ø–ª–µ–Ω–∏–µ:</b> {selectedCabin.heatingType}</Typography>
                <Typography paragraph><b>–ö—É—Ö–Ω—è:</b> {selectedCabin.kitchenFacilities ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</Typography>
                <Typography paragraph><b>–°–∞–Ω—É–∑–µ–ª:</b> {selectedCabin.bathroomType}</Typography>
                <Typography paragraph><b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {selectedCabin.price} —Ä—É–±/—Å—É—Ç–∫–∏</Typography>
                <Typography paragraph><b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</b> {selectedCabin.transportAccess}</Typography>
                <Typography paragraph><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {selectedCabin.description}</Typography>
              </DialogContent>
              <DialogActions sx={{ borderTop: '1px solid rgba(255, 255, 255, 0.1)' }}>
                <Button 
                  onClick={handleCloseDialog}
                  sx={{ 
                    color: '#ffffff',
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.1)'
                    }
                  }}
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
              </DialogActions>
            </>
          )}
        </Dialog>

        {/* –û—Ö–æ—Ç–∞ */}
        <Accordion sx={{ 
          bgcolor: 'rgba(0, 0, 0, 0.3)', 
          color: '#ffffff', 
          mb: 1,
          minWidth: 0
        }}>
          <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: '#ffffff' }} />}>
            <Typography noWrap>üéØ –û—Ö–æ—Ç–∞</Typography>
          </AccordionSummary>
          <AccordionDetails>
            {mockData.hunting.map((item, index) => (
              <Typography key={index} noWrap>‚Ä¢ {item}</Typography>
            ))}
          </AccordionDetails>
        </Accordion>

        {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ */}
        {[
          { icon: 'üìÖ', title: '–°–µ–∑–æ–Ω—ã', data: mockData.seasons },
          { icon: '‚ö†Ô∏è', title: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', data: mockData.restrictions },
          { icon: 'üèóÔ∏è', title: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', data: mockData.infrastructure },
          { icon: 'üíß', title: '–í–æ–¥–∞', data: mockData.waterSources },
          { icon: 'üìã', title: '–î–æ–∫—É–º–µ–Ω—Ç—ã', data: mockData.documents },
          { icon: 'üìû', title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', data: mockData.contacts },
          { icon: 'üìú', title: '–ü—Ä–∞–≤–∏–ª–∞', data: mockData.rules }
        ].map(({ icon, title, data }) => (
          <Accordion key={title} sx={{ 
            bgcolor: 'rgba(0, 0, 0, 0.3)', 
            color: '#ffffff', 
            mb: 1,
            minWidth: 0
          }}>
            <AccordionSummary expandIcon={<ExpandMoreIcon sx={{ color: '#ffffff' }} />}>
              <Typography noWrap>{icon} {title}</Typography>
            </AccordionSummary>
            <AccordionDetails>
              {data.map((item, index) => (
                <Typography key={index} noWrap>‚Ä¢ {item}</Typography>
              ))}
            </AccordionDetails>
          </Accordion>
        ))}
      </Box>
    </Box>
  );
}